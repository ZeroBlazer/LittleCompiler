input = _{ soi ~ statement* ~ eoi }

statement = { declaration | assignment | while_loop | conditional | (expr ~ semi) | comment }

whitespace      = _{ space | newline }
comment         = @{ block_comment | line_comment }
line_comment    = _{ "//" ~ (!("\r" | "\n") ~ any)* ~ ("\n" | "\r\n" | "\r" | eoi) }
block_comment   = _{ "/*" ~ ((!("*/") ~ any) | block_comment)* ~ "*/" }
newline         = _{ "\n" | "\r\n" }
space           = _{ " " | "\t" }
semi            = { ";" }

assignment  = _{ identifier ~ right_assign ~ semi }

declaration = { val_decl | var_decl | func_decl }
val_decl    = { "val" ~ identifier ~ type_decl ~ right_assign ~ semi }
var_decl    = { "var" ~ identifier ~ type_decl? ~ right_assign? ~ semi }
func_decl   = { "fn" ~ identifier ~ func_args ~ type_decl? ~ block }

func_args   = { "(" ~ args_decl ~ ")" }
args_decl   = { arg_decl ~ ("," ~ arg_decl)* | arg_decl? }
arg_decl    = { identifier ~ type_decl }

right_assign = { op_assign ~ expr }
type_decl = { op_declare_type ~ type_def }

type_def    = _{ identifier }
identifier  = @{ alpha ~ (alpha | digit)* | "_" ~ (alpha | digit)+ }

conditional = { "if" ~ expr ~ block ~ (op_else_if ~ expr ~ block)* ~ (op_else ~ block)? }
op_else_if = { "else if" }
op_else = { "else" }

while_loop = { "while" ~ expr ~ block }

expr = { bool_literal | identifier | float | int }
    // { bool_not | func_call | field_access | string_literal | bool_literal | identifier | conditional | number }
//     { bool_not | bool_literal | identifier | int | float }

//     bool_or     = { op_bool_or }
//     bool_and    = { op_bool_and }
    
//     comparison  = { op_eq | op_ne | op_ge | op_le | op_gt | op_lt }
// }
bool_not    = _{ op_not ~ expr }

block       = _{ block_start ~ statement* ~ expr? ~ block_end }
block_start = { "{" }
block_end   = { "}" }

binary_op = _{
  op_expo   |
  op_mult   |
  op_div    |
  op_mod    |
  op_add    |
  op_sub    |
  op_bsl    |
  op_bsr    |
  op_and    |
  op_band   |
  op_or     |
  op_bor    |
  op_bxor   |
  op_lte    |
  op_lt     |
  op_gte    |
  op_gt     |
  op_eq     |
  op_ne     |
  op_assign
}

op_expo   = { "**" }
op_mult   = { "*" }
op_div    = { "/" }
op_mod    = { "%" }
op_add    = { "+" }
op_sub    = { "-" }
op_bsl    = { "<<" }
op_bsr    = { ">>" }
op_band   = { "&" }
op_bor    = { "|" }
op_bxor   = { "^" }
op_lt     = { "<" }
op_lte    = { "<=" }
op_gt     = { ">" }
op_gte    = { ">=" }
op_eq     = { "==" }
op_ne     = { "!=" }
op_and    = { "&&" }
op_or     = { "||" }
op_not    = { "!" }
op_assign = { "=" }
op_declare_type = { ":" }

true_lit    = _{ "true" }
false_lit   = _{ "false" }
bool_literal = @{ true_lit | false_lit }
digit       = _{ '0'..'9' }
int         = _{ digit ~ (digit | "_")* }
float       = _{ int ~ "." ~ int? }
alpha       = @{ 'a'..'z' | 'A'..'Z' }